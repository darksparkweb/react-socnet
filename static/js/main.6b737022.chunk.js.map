{"version":3,"sources":["components/common/FormsControls/formsControls.tsx","components/Users/users.module.css","components/common/FormsControls/formsControls.module.css","api/dialogs-api.ts","Redux/dialogsReducer.ts","Redux/Selectors/auth-selectors.ts","img/user.png","api/profile-api.ts","Redux/profileReducer.ts","Redux/Selectors/dialogs-selectors.ts","api/api.ts","api/chat-api.ts","Redux/chat-reducer.ts","components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Login/login.module.css","Redux/Selectors/users-selectors.ts","api/users-api.ts","Redux/usersReducer.ts","api/auth-api.ts","api/security-api.ts","Redux/auth-reducer.ts","Redux/app-reducer.ts","Redux/redux-store.ts","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","Utils/Validators/validators.ts","components/Login/loginPage.tsx","components/common/preloader.tsx","Hoc/WithSuspense.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","img/Logo.png","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","textArea","Input","createField","placeholder","name","validators","component","type","text","validate","module","exports","dialogsAPI","instance","get","then","res","data","userId","put","page","count","items","body","post","messageId","delete","initialState","dialogs","messages","isFetching","totalCount","newMessageCount","actions","sendMessage","setAllDialogs","setMessages","toggleIsFetching","deleteMessage","restoreMessage","newMessages","getMyDialogs","dispatch","a","getMyMessages","startMessaging","resultCode","sendMessageReq","newMessagesCount","dialogsReducer","state","action","filter","message","id","selectIsAuth","auth","isAuth","selectUserLogin","login","selectCurrentUserId","profileAPI","userID","status","photoFile","formData","FormData","append","headers","profile","posts","like","dislike","theWallPost","addPostActionCreator","deletePost","setUserProfile","setStatus","savePhotoSuccess","photos","getUserProfile","getStatus","updateStatus","savePhoto","file","saveProfile","getState","stopSubmit","_error","Promise","reject","profileReducer","newPost","Date","now","getDialogsSelect","dialogsPage","getMessagesSelect","messagesCount","ResultCodesEnum","ResultCodesForCaptcha","axios","create","withCredentials","baseURL","subscribers","socket","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","JSON","parse","forEach","openHandler","errorHandler","console","log","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callBack","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","newStatusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","length","isUserAuth","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","getFollowingInProgress","followingInProgress","getUsersFilter","usersAPI","term","friend","requestUsers","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","News","content","Music","Settings","required","value","LoginReduxForm","reduxForm","handleSubmit","onSubmit","undefined","alt","src","style","formError","LoginPage","useSelector","useDispatch","to","CaptchaIsRequired","Loader","LoadingOutlined","fontSize","display","justifyContent","alignItems","margin","withSuspense","WrappedComponent","Suspense","fallback","User","user","unfollow","follow","bodyStyle","minWidth","size","bordered","styles","card","small","userPhoto","userName","ellipsis","disabled","some","onClick","MinusOutlined","PlusOutlined","UsersSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","enableReinitialize","initialValues","String","setSubmitting","isSubmitting","width","border","marginRight","outline","as","height","Users","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","onPageChanged","pageNumber","onPageSizeChanged","current","followUser","unfollowUser","direction","align","marginTop","onChange","total","onShowSizeChange","AppHeader","Header","Layout","MailOutlined","backgroundColor","position","justify","span","logo","level","color","overlayInnerStyle","title","xs","sm","md","lg","xl","xxl","icon","UserOutlined","PoweroffOutlined","Content","Footer","DialogsContainer","lazy","ProfileContainer","ChatPage","library","add","far","SuspendedDialogs","SuspendedProfile","SuspendedChat","bmBurgerButton","right","top","bmBurgerBars","background","bmBurgerBarsHover","bmCrossButton","bmCross","bmMenuWrap","bmMenu","padding","bmMorphShape","fill","bmItemList","flexDirection","bmItem","bmOverlay","App","catchAllUnhandledErrors","alert","this","initializeApp","minHeight","HomeOutlined","MessageOutlined","UsergroupAddOutlined","WechatOutlined","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SocNetApp","ReactDOM","document","getElementById"],"mappings":"6QAUMA,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACI,8BAAMC,IACLC,GAAY,+BAAOF,QAKnBM,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD8C,YACxBS,EADwB,mBAG5D,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,gEAAcC,GAAWC,GAAzB,IAAoCN,UAAWC,IAAEM,gBAGvEC,EAAqC,SAACJ,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD2C,YACrBS,EADqB,mBAGzD,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,6DAAWC,GAAWC,GAAtB,IAAiCN,UAAWC,IAAEI,aAI1E,SAASI,EACZC,EACAC,EACAC,EACAC,EACAC,GAED,IADCC,EACF,uDADS,GAEP,OAAO,gCACH,cAAC,IAAD,CACIL,YAAaA,EACbG,UAAWA,EACXF,KAAMA,EACNK,SAAUJ,EACVE,KAAMA,IACPC,O,oBC/CXE,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,UAAY,yBAAyB,SAAW,wBAAwB,OAAS,sBAAsB,KAAO,oBAAoB,QAAU,uBAAuB,KAAO,oBAAoB,KAAO,oBAAoB,OAAS,sBAAsB,SAAW,wBAAwB,QAAU,yB,oBCAvXD,EAAOC,QAAU,CAAC,SAAW,gCAAgC,YAAc,mCAAmC,MAAQ,6BAA6B,MAAQ,6BAA6B,UAAY,mC,mSCGvLC,EAAa,WAElB,OAAOC,IAASC,IAAT,WACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHhBL,EAAa,SAKRM,GACV,OAAOL,IAASM,IAAT,kBAAyCD,IAC3CH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAPhBL,EAAa,SASVM,EAAgBE,GAA4C,IAA9BC,EAA6B,uDAAN,KAC7D,OAAOR,IAASC,IAAT,kBAA4CI,EAA5C,0BAAoEE,EAApE,kBAAkFC,IACpFN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKK,UAXrBV,EAAa,SAaVM,EAAgBK,GACxB,OAAOV,IAASW,KAAT,kBAA0CN,EAA1C,aAA6D,CAACK,SAChER,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAfhBL,EAAa,SAiBRa,GACV,OAAOZ,IAASa,OAAT,2BAAqDD,IACvDV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAnBhBL,EAAa,WAsBlB,OAAOC,IAASC,IAAT,8BACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCVzBU,EAAe,CACfC,QAAS,GACTC,SAAU,GACVC,YAAY,EACZC,WAAY,IACZC,gBAAiB,KACjB1C,MAAO,IA6DE2C,EAAU,CACnBC,YAAa,SAACX,GAAD,MAAyB,CAAChB,KAAM,2BAA4BgB,SACzEY,cAAe,SAACP,GAAD,MAAkC,CAACrB,KAAM,yBAAyBqB,YACjFQ,YAAa,SAACP,GAAD,MAAoC,CAACtB,KAAM,0BAA0BsB,aAClFQ,iBAAkB,SAACP,GAAD,MAA0B,CAACvB,KAAM,gCAAiCuB,eACpFQ,cAAe,SAACb,GAAD,MAAwB,CAAClB,KAAM,4BAA6BkB,cAC3Ec,eAAgB,SAACd,GAAD,MAAwB,CAAClB,KAAM,6BAA8BkB,cAC7Ee,YAAa,SAACvB,GAAD,MAAmB,CAACV,KAAM,gCAAiCU,UAI/DwB,EAAe,yDAAgB,WAAOC,GAAP,eAAAC,EAAA,sEACrB/B,IADqB,OAClCK,EADkC,OAGxCyB,EAAST,EAAQE,cAAclB,IAHS,2CAAhB,uDAMf2B,EAAgB,SAAC1B,EAAgBE,EAAcC,GAA/B,8CAAgE,WAAOqB,GAAP,eAAAC,EAAA,sEAEtE/B,EAAuBM,EAAQE,EAAMC,GAFiC,cAEnFJ,EAFmF,gBAInFyB,EAAST,EAAQG,YAAYnB,IAJsD,OAKzFyB,EAAST,EAAQI,kBAAiB,IALuD,2CAAhE,uDAQhBQ,EAAiB,SAAC3B,EAAgBE,EAAcC,GAA/B,8CAAgE,WAAOqB,GAAP,SAAAC,EAAA,6DAC1FD,EAAST,EAAQI,kBAAiB,IADwD,SAEvEzB,EAAyBM,GAF8C,UAIlE,IAJkE,OAIjF4B,WAJiF,gCAKhFJ,EAASE,EAAc1B,EAAQE,EAAMC,IAL2C,2CAAhE,uDASjB0B,EAAiB,SAAC7B,EAAgBK,GAAjB,8CAAkD,WAAOmB,GAAP,SAAAC,EAAA,sEAEzD/B,EAAwBM,EAAQK,GAFyB,OAGrD,IAHqD,OAGpEuB,YACJJ,EAAST,EAAQC,YAAYX,IAJ2C,2CAAlD,uDAOjBe,EAAgB,SAACb,GAAD,8CAAiC,WAAOiB,GAAP,SAAAC,EAAA,sEACvC/B,EAAyBa,GADc,OAEnC,IAFmC,OAElDqB,YACJJ,EAAST,EAAQK,cAAcb,IAHuB,2CAAjC,uDAYhBuB,EAAmB,yDAAgB,WAAON,GAAP,eAAAC,EAAA,sEACzB/B,IADyB,QACtCK,EADsC,SAKxCyB,EAAST,EAAQO,YAAYvB,IALW,2CAAhB,uDAWjBgC,IA1GQ,WAAgE,IAA/DC,EAA8D,uDAAtDvB,EAAcwB,EAAwC,uCAClF,OAAQA,EAAO5C,MAOX,IAAK,yBACD,OAAO,2BACA2C,GADP,IACctB,QAASuB,EAAOvB,UAGlC,IAAK,0BAGD,OAAO,2BAAIsB,GAAX,IAAkBrB,SAAUsB,EAAOtB,WAEvC,IAAK,2BAGD,OAAO,2BAAIqB,GAAX,IAAkBrB,SAAS,GAAD,mBAAMqB,EAAMrB,UAAZ,CAAsB,CAACN,KAAM4B,EAAO5B,UAElE,IAAK,gCACD,OAAO,2BAAI2B,GAAX,IAAkBpB,WAAYqB,EAAOrB,aAEzC,IAAK,4BACD,OAAO,2BAAIoB,GAAX,IAAkBrB,SAAUqB,EAAMrB,SAASuB,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAOH,EAAO1B,eAEzF,IAAK,6BACD,OAAO,2BAAIyB,GAAX,IAAkBrB,SAAUqB,EAAMrB,SAASuB,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAOH,EAAO1B,eAEzF,IAAK,gCAED,OAAO,2BAAIyB,GAAX,IAAkBlB,gBAAiBmB,EAAOlC,OAG9C,QACI,OAAOiC,K,iCC7EnB,sGAAO,IAAMK,EAAe,SAACL,GACzB,OAAOA,EAAMM,KAAKC,QAETC,EAAkB,SAACR,GAC5B,OAAOA,EAAMM,KAAKG,OAETC,EAAsB,SAACV,GAChC,OAAOA,EAAMM,KAAKF,K,iCCVP,QAA0B,kC,4SCO5BO,EAAa,SACXC,GACP,OAAOjD,IAASC,IAAiB,WAAagD,GAAQ/C,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAF/D4C,EAAa,SAIZC,GACN,OAAOjD,IAASC,IAAY,kBAAoBgD,GAAQ/C,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALnE4C,EAAa,SAOTE,GACT,OAAOlD,IAASM,IAAT,iBAAgD,CAAC4C,OAAQA,IAAShD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SARpF4C,EAAa,SAUZG,GACN,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBnD,IAASM,IAAT,gBAA0E8C,EAAU,CACvFG,QAAS,CACL,eAAgB,yBAErBrD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAjBd4C,EAAa,SAmBVQ,GACR,OAAOxD,IAASM,IAAT,WAA0CkD,GAAStD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCnB9EU,EAAe,CACf2C,MAAO,CACH,CAAChB,GAAI,EAAGiB,KAAM,GAAIC,QAAS,EAAGnB,QAAS,sBAAuBS,OAAQ,OACtE,CAACR,GAAI,EAAGiB,KAAM,GAAIC,QAAS,EAAGnB,QAAS,uCAAwCS,OAAQ,OACvF,CAACR,GAAI,EAAGiB,KAAM,GAAIC,QAAS,EAAGnB,QAAS,sCAAuCS,OAAQ,OACtF,CAACR,GAAI,EAAGiB,KAAM,GAAIC,QAAS,EAAGnB,QAAS,gEAAiES,OAAQ,OAChH,CAACR,GAAI,EAAGiB,KAAM,IAAKC,QAAS,EAAGnB,QAAS,8CAA+CS,OAAQ,GAC/F,CAACR,GAAI,EAAGiB,KAAM,GAAIC,QAAS,EAAGnB,QAAS,uBAAwBS,OAAQ,QAE3EO,QAAS,KACTN,OAAQ,GACRU,YAAa,IA0CJxC,EAAU,CACnByC,qBAAsB,SAACD,GAAD,MAA0B,CAAClE,KAAM,sBAAuBkE,gBAC9EE,WAAY,SAACrB,GAAD,MAAiB,CAAC/C,KAAM,yBAA0B+C,OAC9DsB,eAAgB,SAACP,GAAD,MAA2B,CAAC9D,KAAM,8BAA+B8D,YACjFQ,UAAW,SAACd,GAAD,MAAqB,CAACxD,KAAM,wBAAyBwD,WAChEe,iBAAkB,SAACC,GAAD,MAAyB,CAACxE,KAAM,gCAAiCwE,YAS1EC,EAAiB,SAAClB,GAAD,8CAA8B,WAAOpB,GAAP,eAAAC,EAAA,sEACrCkB,EAAsBC,GADe,OAClD7C,EADkD,OAEpDyB,EAAST,EAAQ2C,eAAe3D,IAFoB,2CAA9B,uDAIjBgE,EAAY,SAACnB,GAAD,8CAA8B,WAAOpB,GAAP,eAAAC,EAAA,sEAClCkB,EAAqBC,GADa,OAC/C7C,EAD+C,OAE/CyB,EAAST,EAAQ4C,UAAU5D,IAFoB,2CAA9B,uDAIZiE,EAAe,SAACnB,GAAD,8CAA6B,WAAOrB,GAAP,SAAAC,EAAA,sEACpCkB,EAAwBE,GADY,OAE7B,IAF6B,OAE5CjB,YACLJ,EAAST,EAAQ4C,UAAUd,IAHsB,2CAA7B,uDAMfoB,EAAY,SAACC,GAAD,8CAAyB,WAAO1C,GAAP,eAAAC,EAAA,sEAC7BkB,EAAqBuB,GADQ,OAEtB,KADpBnE,EAD0C,QAErC6B,YACLJ,EAAST,EAAQ6C,iBAAiB7D,EAAKA,KAAK8D,SAHF,2CAAzB,uDAMZM,EAAc,SAAChB,GAAD,8CAAmC,WAAO3B,EAAU4C,GAAjB,iBAAA3C,EAAA,6DACpDmB,EAASwB,IAAW9B,KAAKF,GAD2B,SAEzCO,EAAuBQ,GAFkB,UAGlC,KADpBpD,EAFsD,QAGjD6B,WAHiD,oBAIhC,kBAAXgB,EAJ2C,gCAK5CpB,EAASsC,EAAelB,IALoB,sCAQtDpB,EAAS6C,YAAW,eAAgB,CAACC,OAAQvE,EAAKY,SAAS,MARL,kBAS/C4D,QAAQC,OAAOzE,EAAKY,SAAS,KATkB,4CAAnC,yDAaZ8D,IApFQ,WAAiE,IAAhEzC,EAA+D,uDAAvDvB,EAAcwB,EAAyC,uCAEnF,OAAQA,EAAO5C,MACX,IAAK,sBACD,IAAIqF,EAAU,CACVtC,GAAIuC,KAAKC,MACTvB,KAAM,EACNC,QAAS,EACTnB,QAASF,EAAOsB,YAChBX,OAAQ,OAEZ,OAAO,2BACAZ,GADP,IAEIoB,MAAM,GAAD,mBAAMpB,EAAMoB,OAAZ,CAAmBsB,MAGhC,IAAK,yBACD,OAAO,2BACA1C,GADP,IAEIoB,MAAOpB,EAAMoB,MAAMlB,QAAO,SAACkB,GAAD,OAAWA,EAAMhB,KAAOH,EAAOG,QAGjE,IAAK,8BACD,OAAO,2BAAIJ,GAAX,IAAkBmB,QAASlB,EAAOkB,UAEtC,IAAK,wBACD,OAAO,2BAAInB,GAAX,IAAkBa,OAAQZ,EAAOY,SAErC,IAAK,gCACD,OAAO,2BAAIb,GAAX,IAAkBmB,QAAQ,2BAAKnB,EAAMmB,SAAZ,IAAqBU,OAAQ5B,EAAO4B,WAGjE,QACI,OAAO7B,K,iCCtDnB,sGAAO,IAAM6C,EAAmB,SAAC7C,GAC7B,OAAOA,EAAM8C,YAAYpE,SAEhBqE,EAAoB,SAAC/C,GAC9B,OAAOA,EAAM8C,YAAYnE,UAKhBqE,EAAgB,SAAChD,GAC1B,OAAOA,EAAM8C,YAAYhE,kB,gCCb7B,0GAwBYmE,EAIAC,EA5BZ,SAGavF,EAHb,OAGwBwF,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTpC,QAAS,CACL,UAAY,2C,SAiBR+B,O,qBAAAA,I,kBAAAA,M,cAIAC,O,2CAAAA,M,2LC5BNK,EAAc,CAChB,oBAAqB,GACrB,iBAAkB,IAGlBC,EAA2B,KAIzBC,EAAe,WACjBC,EAA6B,WAC7BC,WAAWC,EAAe,MAGxBC,EAAiB,SAACC,GACpB,IAAMxE,EAAcyE,KAAKC,MAAMF,EAAE/F,MACjCwF,EAAY,qBAAqBU,SAAQ,SAAAzH,GAAC,OAAIA,EAAE8C,OAE9C4E,EAAc,WAChBR,EAA6B,UAE3BS,EAAe,WACjBT,EAA6B,SAC7BU,QAAQC,IAAI,iBAEVC,EAAU,WAAO,IAAD,QACZ,QAAN,EAAAd,SAAA,SAAQe,oBAAoB,QAASd,GAC/B,QAAN,EAAAD,SAAA,SAAQe,oBAAoB,UAAWV,GACjC,QAAN,EAAAL,SAAA,SAAQe,oBAAoB,OAAQL,GAC9B,QAAN,EAAAV,SAAA,SAAQe,oBAAoB,QAASJ,IAGnCT,EAA+B,SAAC7C,GAClC0C,EAAY,kBAAkBU,SAAQ,SAAAzH,GAAC,OAAIA,EAAEqE,OAGjD,SAAS+C,IAAiB,IAAD,EACrBU,IACM,QAAN,EAAAd,SAAA,SAAQgB,QACRhB,EAAS,IAAIiB,UAAU,gEACvBf,EAA6B,WAC7BF,EAAOkB,iBAAiB,QAASjB,GACjCD,EAAOkB,iBAAiB,UAAWb,GACnCL,EAAOkB,iBAAiB,OAAQR,GAChCV,EAAOkB,iBAAiB,QAASP,GAI9B,IAAMQ,EAAU,WAEff,KAFKe,EAAU,WAIX,IAAD,EACHpB,EAAY,qBAAuB,GACnCA,EAAY,kBAAoB,GAChCe,IACM,QAAN,EAAAd,SAAA,SAAQgB,SARHG,EAAU,SAWTC,EAA6BC,GAGnC,OADAtB,EAAYqB,GAAWE,KAAKD,GACrB,WAEHtB,EAAYqB,GAAarB,EAAYqB,GAAW1E,QAAO,SAAA1D,GAAC,OAAIA,IAAMqI,OAhBjEF,EAAU,SAmBPC,EAA6BC,GAErCtB,EAAYqB,GAAarB,EAAYqB,GAAW1E,QAAO,SAAA1D,GAAC,OAAIA,IAAMqI,MArB7DF,EAAU,SAuBPxE,GAAkB,IAAD,EACnB,QAAN,EAAAqD,SAAA,SAAQuB,KAAK5E,I,SChEjB1B,EAAe,CACfE,SAAU,GACVkC,OAAQ,WAwBC9B,EACS,SAACJ,GAAD,MAAqC,CACnDtB,KAAM,4BACN2H,QAAS,CAACrG,cAHLI,EAKM,SAAC8B,GAAD,MAAyB,CACpCxD,KAAM,yBACN2H,QAAS,CAACnE,YAKdoE,EAAwE,KAEtEC,EAA2B,SAAC1F,GAM9B,OAL2B,OAAvByF,IACAA,EAAqB,SAACtG,GAClBa,EAAST,EAAyBJ,MAGnCsG,GAGPE,EAA+D,KAE7DC,EAAiC,SAAC5F,GAMpC,OAL8B,OAA1B2F,IACAA,EAAwB,SAACtE,GACrBrB,EAAST,EAAsB8B,MAGhCsE,GAGEE,EAAyB,yDAAiB,WAAO7F,GAAP,SAAAC,EAAA,sDACnDkF,IACAA,EAAkB,oBAAqBO,EAAyB1F,IAChEmF,EAAkB,iBAAkBS,EAA+B5F,IAHhB,2CAAjB,uDAMzB8F,EAAwB,yDAAiB,WAAO9F,GAAP,SAAAC,EAAA,sDAClDkF,EAAoB,oBAAqBO,EAAyB1F,IAClEmF,EAAoB,iBAAkBS,EAA+B5F,IACrEmF,IAHkD,2CAAjB,uDAMxB3F,EAAc,SAACmB,GAAD,8CAAgC,WAAOX,GAAP,SAAAC,EAAA,sDACvDkF,EAAoBxE,GADmC,2CAAhC,uDAIZoF,IAvEK,WAAkE,IAAjEvF,EAAgE,uDAAxDvB,EAAcwB,EAA0C,uCACjF,OAAQA,EAAO5C,MACX,IAAK,4BACD,OAAO,2BAEA2C,GAFP,IAGIrB,SAAU,sBAAIqB,EAAMrB,UAAV,YAAuBsB,EAAO+E,QAAQrG,SAAS6G,KAAK,SAACC,GAAD,mBAAC,eAAWA,GAAZ,IAAerF,GAAIsF,qBAC5ExF,QAAO,SAACuF,EAAGE,EAAOC,GAAX,OAAqBD,GAASC,EAAMC,OAAS,SAEjE,IAAK,yBACD,OAAO,2BACA7F,GADP,IAEIa,OAAQZ,EAAO+E,QAAQnE,SAE/B,QACI,OAAOb,K,oBC3BnBxC,EAAOC,QAAU,CAAC,OAAS,qBAAqB,OAAS,qBAAqB,MAAQ,oBAAoB,MAAQ,oBAAoB,QAAU,sBAAsB,WAAa,yBAAyB,IAAM,kBAAkB,OAAS,qBAAqB,KAAO,mBAAmB,KAAO,mBAAmB,SAAW,yB,oBCAjUD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,OAAS,sBAAsB,MAAQ,qBAAqB,MAAQ,qBAAqB,QAAU,uBAAuB,WAAa,0BAA0B,IAAM,mBAAmB,OAAS,sBAAsB,KAAO,oBAAoB,KAAO,oBAAoB,SAAW,0B,oBCA3UD,EAAOC,QAAU,CAAC,OAAS,yBAAyB,OAAS,yBAAyB,MAAQ,wBAAwB,MAAQ,wBAAwB,QAAU,0BAA0B,WAAa,6BAA6B,IAAM,sBAAsB,OAAS,yBAAyB,KAAO,uBAAuB,KAAO,uBAAuB,SAAW,6B,oBCAzWD,EAAOC,QAAU,CAAC,SAAW,wBAAwB,KAAO,sB,sDCA5D,6RAEaqI,EAAa,SAAC9F,GACvB,OAAOA,EAAMM,KAAKC,QAMTwF,EAAWC,aAJQ,SAAChG,GAC7B,OAAOA,EAAMiG,UAAUC,SAIvB,SAACA,GACG,OAAOA,EAAMhG,QAAO,SAAAiG,GAAC,OAAI,QAGpBC,EAAc,SAACpG,GACxB,OAAOA,EAAMiG,UAAUI,UAGdC,EAAqB,SAACtG,GAC/B,OAAOA,EAAMiG,UAAUM,iBAGdC,EAAiB,SAACxG,GAC3B,OAAOA,EAAMiG,UAAUQ,aAGdC,EAAgB,SAAC1G,GAC1B,OAAOA,EAAMiG,UAAUrH,YAGd+H,EAAyB,SAAC3G,GACnC,OAAOA,EAAMiG,UAAUW,qBAGdC,EAAiB,SAAC7G,GAC3B,OAAOA,EAAMiG,UAAU/F,S,6LChCd4G,EAAW,WACyE,IAApFL,EAAmF,uDAArE,EAAGJ,EAAkE,uDAAvD,IAAKU,EAAkD,uDAAnC,GAAIC,EAA+B,uDAAN,KAClF,OAAOrJ,IAASC,IAAkB,qBAAc6I,EAAd,kBAAmCJ,EAAnC,iBAAoDU,IAAqB,OAAXC,EAAkB,GAAlB,kBAAkCA,KAC7HnJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHhB+I,EAAW,SAKTlG,GACP,OAAOjD,IAASW,KAAT,iBAAyCsC,IAAU/C,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SANrE+I,EAAW,SAQPlG,GACT,OAAOjD,IAASa,OAAT,iBAA0BoC,IAAU/C,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCP/DU,EAAe,CACfyH,MAAO,GACPG,SAAU,GACVE,gBAAiB,EACjBE,YAAa,EACb7H,YAAY,EACZgI,oBAAqB,GACrB1G,OAAQ,CACJ6G,KAAM,GACNC,OAAQ,OA4DHjI,EACM,SAAC6B,GAAD,MAAqB,CAACvD,KAAM,kBAAmBuD,WADrD7B,EAEQ,SAAC6B,GAAD,MAAqB,CAACvD,KAAM,oBAAqBuD,WAFzD7B,EAGC,SAACmH,GAAD,MAA6B,CAAC7I,KAAM,qBAAsB6I,UAH3DnH,EAIO,SAAC0H,GAAD,MAA0B,CAACpJ,KAAM,4BAA6BoJ,gBAJrE1H,EAKI,SAACsH,GAAD,MAAuB,CAAChJ,KAAM,yBAA0BgJ,aAL5DtH,EAMW,SAACZ,GAAD,MAAoB,CAACd,KAAM,iCAAkCc,UANxEY,EAOE,SAACmB,GAAD,MAAyB,CAAC7C,KAAM,sBAAuB2H,QAAS9E,IAPlEnB,EAQS,SAACH,GAAD,MAA0B,CAACvB,KAAM,8BAA+BuB,eARzEG,EASgB,SAACH,EAAqBgC,GAAtB,MAA0C,CAC/DvD,KAAM,wCACNuB,aACAgC,WAMKqG,EAAe,SAAC/I,EAAcmI,EAAkBnG,GACzD,8CAAO,WAAOV,GAAP,eAAAC,EAAA,6DACHD,EAAST,GAAyB,IAClCS,EAAST,EAAoBsH,IAC7B7G,EAAST,EAAuBb,IAChCsB,EAAST,EAAkBmB,IAJxB,SAMc4G,EAAkB5I,EAAMmI,EAAUnG,EAAO6G,KAAM7G,EAAO8G,QANpE,OAMCjJ,EAND,OAOHyB,EAAST,GAAyB,IAClCS,EAAST,EAAiBhB,EAAKK,QAC/BoB,EAAST,EAA2BhB,EAAKc,aATtC,4CAAP,uDAYEqI,EAAmB,uCAAG,WAAO1H,EAAiCoB,EAAgBuG,EAAuDC,GAA/G,SAAA3H,EAAA,6DACxBD,EAAST,GAAgC,EAAM6B,IADvB,SAEPuG,EAAUvG,GAFH,OAGA,IAHA,OAGfhB,YACLJ,EAAS4H,EAAcxG,IAE3BpB,EAAST,GAAgC,EAAO6B,IANxB,2CAAH,4DAmBVyG,EAxGM,WAAkE,IAAjErH,EAAgE,uDAAxDvB,EAAcwB,EAA0C,uCAClF,OAAQA,EAAO5C,MACX,IAAK,kBACD,OAAO,2BACA2C,GADP,IAEIkG,MAAOlG,EAAMkG,MAAMV,KAAI,SAAAW,GACnB,OAAIA,EAAE/F,KAAOH,EAAOW,OACT,2BAAIuF,GAAX,IAAcmB,UAAU,IAErBnB,OAGnB,IAAK,oBACD,OAAO,2BACAnG,GADP,IAEIkG,MAAOlG,EAAMkG,MAAMV,KAAI,SAAAW,GACnB,OAAIA,EAAE/F,KAAOH,EAAOW,OACT,2BAAIuF,GAAX,IAAcmB,UAAU,IAErBnB,OAGnB,IAAK,qBACD,OAAO,2BAAInG,GAAX,IAAkBkG,MAAOjG,EAAOiG,QAEpC,IAAK,4BACD,OAAO,2BAAIlG,GAAX,IAAkByG,YAAaxG,EAAOwG,cAE1C,IAAK,yBACD,OAAO,2BAAIzG,GAAX,IAAkBqG,SAAUpG,EAAOoG,WAEvC,IAAK,iCACD,OAAO,2BAAIrG,GAAX,IAAkBuG,gBAAiBtG,EAAO9B,QAE9C,IAAK,8BACD,OAAO,2BAAI6B,GAAX,IAAkBpB,WAAYqB,EAAOrB,aAEzC,IAAK,wCACD,OAAO,2BACAoB,GADP,IAEI4G,oBAAqB3G,EAAOrB,WAAP,sBACXoB,EAAM4G,qBADK,CACgB3G,EAAOW,SACtCZ,EAAM4G,oBAAoB1G,QAAO,SAAAE,GAAE,OAAIA,IAAOH,EAAOW,YAGnE,IAAK,sBACD,OAAO,2BAAIZ,GAAX,IAAkBE,OAAQD,EAAO+E,UAErC,QACI,OAAOhF,I,SC3DNuH,EAAU,WAEf,OAAO5J,IAASC,IAAT,WACFC,MAAK,SAACC,GAAD,OAASA,EAAIC,SAHlBwJ,EAAU,SAKbC,EAAeC,GAAsE,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAChF,OAAOhK,IAASW,KAAT,aAA6G,CAACkJ,QAAOC,WAAUC,aAAYC,YAC7I9J,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAPhBwJ,EAAU,WAUf,OAAO5J,IAASa,OAAT,aAA8B,KCfhCoJ,EAAc,WAEnB,OAAOjK,IAASC,IAAT,4BAAoEC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SCF7FU,EAAe,CACf2B,GAAI,KACJoH,MAAO,KACP/G,MAAO,KACPF,QAAQ,EACRsH,WAAY,MAgBH9I,EACQ,SAACqB,EAAmBoH,EAAsB/G,EAAsBF,GAAhE,MAAqF,CAClGlD,KAAM,wBACN2H,QAAS,CAAC5E,KAAIoH,QAAO/G,QAAOF,YAHvBxB,EAKa,SAAC8I,GAAD,MAAyB,CAC3CxK,KAAM,kCACN2H,QAAS,CAAC6C,gBAOLC,EAAkB,yDAAgB,WAAOtI,GAAP,uBAAAC,EAAA,sEACxB8H,IADwB,QACvCQ,EADuC,QAEhCnI,aAAeqD,IAAgB+E,UAAU,EACvBD,EAAOhK,KAA3BqC,EAD0C,EAC1CA,GAAIoH,EADsC,EACtCA,MAAO/G,EAD+B,EAC/BA,MAChBjB,EAAST,EAAwBqB,EAAIoH,EAAO/G,GAAO,KAJZ,2CAAhB,uDAqBlBwH,EAAgB,yDAAgB,WAAOzI,GAAP,iBAAAC,EAAA,sEACtBmI,IADsB,OACnC7J,EADmC,OAEnC8J,EAAa9J,EAAKmK,IACxB1I,EAAST,EAA6B8I,IAHG,2CAAhB,uDAadM,EA7DK,WAAkE,IAAjEnI,EAAgE,uDAAxDvB,EAAcwB,EAA0C,uCACjF,OAAQA,EAAO5C,MACX,IAAK,wBACL,IAAK,kCACD,OAAO,2BACA2C,GACAC,EAAO+E,SAElB,QACI,OAAOhF,I,kBCnBfvB,EAAe,CACf2J,aAAa,GAqBJrJ,EACW,iBAAO,CAAC1B,KAAM,+BAavBgL,EA3BI,WAAkE,IAAjErI,EAAgE,uDAAxDvB,EAAcwB,EAA0C,uCAChF,OAAQA,EAAO5C,MACX,IAAK,6BACD,OAAO,2BACA2C,GADP,IAEIoI,aAAa,IAErB,QACI,OAAOpI,I,SCXfsI,EAAcC,YAAgB,CAC9BC,YAAa/F,IACbK,YAAa/C,IACbkG,UAAWoB,EACX/G,KAAM6H,EACNM,KAAMC,IACNC,IAAKN,EACLO,KAAMrD,MAWJsD,GAAmBC,OAAOC,sCAAwCC,IAClEC,GAAQC,YAAYZ,EAAaO,GAAiBM,YAAgBC,OAGxEN,OAAOO,UAAYJ,GAEJA,U,yDC5BAK,GAJF,WACX,OAAO,sBAAK/M,UAAWC,KAAE+M,QAAlB,mB,qBCGMC,GAJD,WACZ,OAAO,sBAAKjN,UAAWC,KAAE+M,QAAlB,oB,qBCGME,GAJE,WACf,OAAO,sBAAKlN,UAAWC,KAAE+M,QAAlB,uB,wDCDIG,GAA8B,SAACC,GACxC,IAAIA,EACJ,MAAO,qB,0CC2CLC,GAAiBC,aAAyC,CAACpB,KAAM,SAAhDoB,EAtBkE,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,aAAc1N,EAAuB,EAAvBA,MAAOyL,EAAgB,EAAhBA,WAC5G,OAEI,wBAAMkC,SAAUD,EAAhB,UAEK9M,aAAiC,SAAU,QAAS,CAAC0M,IAAW3M,KAAO,SACvEC,aAAiC,WAAY,WAAY,CAAC0M,IAAW3M,KAAO,YAC5EC,kBAAiCgN,EAAW,aAAc,GAAIjN,KAAO,WAAY,eAEjF8K,GAAc,sBAAKoC,IAAK,UAAWC,IAAKrC,IACxCA,GAAc7K,aAAiC,qBAAsB,UAAW,CAAC0M,IAAW3M,KAAO,IACnGX,GACD,sBAAKG,UAAW4N,KAAMC,UAAtB,SACKhO,IAGL,+BACI,oDAOHiO,GAAsB,WAC/B,IAAMxC,EAAayC,cAAY,SAACtK,GAAD,OAAwBA,EAAMM,KAAKuH,cAC5DtH,EAAS+J,cAAY,SAACtK,GAAD,OAAwBA,EAAMM,KAAKC,UAExDf,EAAW+K,eAMjB,OAAIhK,EACO,eAAC,KAAD,CAAUiK,GAAI,aAElB,uBAAKjO,UAAWC,KAAE6B,KAAlB,UACH,wCACA,eAACuL,GAAD,CAAgBG,SARH,SAAChJ,GPPD,IAACyG,EAAeC,EAAkBC,EAAqBC,EOQpEnI,GPRcgI,EOQCzG,EAASyG,MPRKC,EOQE1G,EAAS0G,SPROC,EOQG3G,EAAS2G,WPRSC,EOQG5G,EAAS4G,QPRnE,uCAAqF,WAAOnI,GAAP,iBAAAC,EAAA,sEACrF8H,EAAcC,EAAOC,EAAUC,EAAYC,GAD0C,WAClG5J,EADkG,QAE7F6B,aAAeqD,IAAgB+E,QAF8D,gCAG5FxI,EAASsI,KAHmF,iCAK9F/J,EAAK6B,aAAesD,IAAsBuH,kBALoD,kCAMxFjL,EAASyI,KAN+E,QAQ9F9H,EAAUpC,EAAKY,SAASkH,OAAS,EAAI9H,EAAKY,SAAS,GAAK,aAC5Da,EAAS6C,YAAW,QAAS,CAACC,OAAQnC,KAT4D,4CAArF,yDOeuB0H,WAAYA,Q,UCxDzC6C,GALQ,SAAC/N,GACpB,OAAO,eAACgO,GAAA,EAAD,CAAiBR,MAAO,CAACS,SAAU,GAAIC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,OAAQ,iBCFpH,SAASC,GAAkBC,GAC9B,OAAO,SAACvO,GACJ,OAAO,eAAC,IAAMwO,SAAP,CAAgBC,SAAU,8CAA1B,SACH,eAACF,EAAD,eAAsBvO,O,2ICuDnB0O,GAzCmB,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,KAAM1E,EAAmD,EAAnDA,oBAAqB2E,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAAQjL,EAAY,EAAZA,OAE7E,OAEI,sBAAKhE,UAAU,gCAAf,SAEI,eAAC,KAAD,CAAMkP,UAAW,CAACC,SAAU,QAASC,KAAM,UAAWC,UAAU,EAAhE,SACI,uBAAKrP,UAAWsP,KAAOC,KAAM3B,MAAO,CAACU,QAAS,OAAQC,eAAgB,iBAAtE,UACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAASN,GAAI,YAAcc,EAAKlL,GAAhC,SACI,sBAAK8J,IAA0B,MAArBoB,EAAKzJ,OAAOkK,MAAgBT,EAAKzJ,OAAOkK,MAAQC,KACrDzP,UAAWsP,KAAOG,UAClB/B,IAAKqB,EAAKpO,SAEnB,iCACI,eAAC,KAAD,CAAWX,UAAWsP,KAAOI,SAA7B,SAAwCX,EAAKpO,OAC7C,eAAC,KAAD,CAAMX,UAAWsP,KAAOhL,OAAQsJ,MAAO,GAAI+B,UAAU,EAArD,SAA4DZ,EAAKzK,eAGxEN,EAAU+K,EAAKhE,SACV,yBACE/K,UAAWsP,KAAON,SAClBY,SAAUvF,EAAoBwF,MAAK,SAAAhM,GAAE,OAAIA,IAAOkL,EAAKlL,MACrDiM,QAAS,WACLd,EAASD,EAAKlL,KAJpB,SAKK,eAACkM,GAAA,EAAD,MACL,yBACE/P,UAAWsP,KAAOL,OAClBW,SAAUvF,EAAoBwF,MAAK,SAAAhM,GAAE,OAAIA,IAAOkL,EAAKlL,MACrDiM,QAAS,WACLb,EAAOF,EAAKlL,KAJlB,SAKK,eAACmM,GAAA,EAAD,MAA6B,a,gDC5CtDC,GAA0B,SAACC,GAE7B,MADe,IAYNC,GAAuCC,IAAMC,MAAK,YAAwB,IAAtBC,EAAqB,EAArBA,gBACvD3M,EAASoK,aAAYzD,MAa3B,OAAO,+BACH,eAAC,KAAD,CACIiG,oBAAkB,EAClBC,cAAe,CAAChG,KAAM7G,EAAO6G,KAAMC,OAAQgG,OAAO9M,EAAO8G,SACzDzJ,SAAUiP,GACVzC,SAhBO,SAAC0C,EAAD,GAA4F,IAAxEQ,EAAuE,EAAvEA,cACzB/M,EAAoB,CACtB6G,KAAM0F,EAAO1F,KACbC,OAA0B,SAAlByF,EAAOzF,OAAoB,KAAyB,SAAlByF,EAAOzF,QAGrD6F,EAAgB3M,GAChB+M,GAAc,IAKd,SAMK,gBAAEC,EAAF,EAAEA,aAAF,OACG,gBAAC,KAAD,WAEI,eAAC,KAAD,CAAO/C,MAAO,CAACgD,MAAO,IAAKC,OAAQ,iBAAkBC,YAAa,GAAIC,QAAS,QAASjQ,KAAK,OAAOH,KAAK,SAEzG,gBAAC,KAAD,CAAOA,KAAK,SAASqQ,GAAG,SAASpD,MAAO,CAACqD,OAAQ,GAAIL,MAAO,IAAKC,OAAQ,iBAAkBC,YAAa,GAAIC,QAAS,QAArH,UACI,yBAAQ3D,MAAM,OAAd,iBACA,yBAAQA,MAAM,OAAd,sBACA,yBAAQA,MAAM,QAAd,2BAGJ,eAAC,KAAD,CAAegC,KAAM,QAASQ,SAAUe,EAAxC,6B,+BCxBPO,GAAY,SAAC9Q,GAEtB,IAAM4J,EAAkB+D,aAAYhE,MAC9BJ,EAAQoE,aAAYvE,MACpBxF,EAAS+J,aAAYxE,MACrBW,EAAc6D,aAAY9D,MAC1BH,EAAWiE,aAAYlE,MACvBxH,EAAa0L,aAAY5D,MACzBxG,EAASoK,aAAYzD,MACrBD,EAAsB0D,aAAY3D,MAElCnH,EAAW+K,eACXmD,EAAUC,eAEhBC,qBAAU,WACN,IAAMC,EAASC,SAAkBJ,EAAQK,SAASC,OAAOC,OAAO,IAE5DC,EAAazH,EACb0H,EAAejO,EAEb2N,EAAO3P,OAAMgQ,EAAaE,OAAOP,EAAO3P,OACxC2P,EAAO9G,OAAMoH,EAAY,2BAAOA,GAAP,IAAqBpH,KAAM8G,EAAO9G,QAC3D8G,EAAO7G,SAAQmH,EAAY,2BAC1BA,GAD0B,IAE7BnH,OAA0B,SAAlB6G,EAAO7G,OAAoB,KAAyB,SAAlB6G,EAAO7G,UAGrDxH,EAASyH,EAAaiH,EAAY7H,EAAU8H,MAC7C,IAEHP,qBAAU,WACN,IAAMS,EAAyB,GAEzBnO,EAAO6G,OAAMsH,EAAMtH,KAAO7G,EAAO6G,MACjB,OAAlB7G,EAAO8G,SAAiBqH,EAAMrH,OAASgG,OAAO9M,EAAO8G,SACrC,IAAhBP,IAAmB4H,EAAMnQ,KAAO8O,OAAOvG,IAE3CiH,EAAQ5I,KAAK,CACTwJ,SAAU,SACVN,OAAQF,aAAsBO,OAGnC,CAACnO,EAAQuG,IAEZ,IAAM8H,EAAgB,SAACC,GACnBhP,EAASyH,EAAauH,EAAYnI,EAAUnG,KAE1CuO,EAAoB,SAACC,EAAiB/C,GACxCnM,EAASyH,EAAayH,EAAS/C,EAAMzL,KAKnCyO,EAAa,SAAC3Q,GfkCF,IAAC4C,EejCfpB,GfiCeoB,EejCC5C,EfkCpB,uCAAO,WAAOwB,GAAP,SAAAC,EAAA,sEACGyH,EAAoB1H,EAAUoB,EAAQkG,EAAqB/H,GAD9D,2CAAP,yDehCM6P,EAAe,SAAC5Q,GfoCF,IAAC4C,EenCjBpB,GfmCiBoB,EenCC5C,EfoCtB,uCAAO,WAAOwB,GAAP,SAAAC,EAAA,sEACGyH,EAAoB1H,EAAUoB,EAAQkG,EAAuB/H,GADhE,2CAAP,yDejCA,OAAO,sBAAKxC,UAAWsP,KAAOxN,KAAvB,SACH,gBAAC,KAAD,CAAOwQ,UAAW,WAAYC,MAAO,SAArC,UACI,eAAC,KAAD,CACI3E,MAAO,CAAC4E,UAAW,IACnBC,SAAUT,EACVG,QAASjI,EACTwI,MAAO1I,EACPF,SAAUA,EACV6I,iBAAkBT,IAEtB,eAAC/B,GAAD,CAAiBG,gBApBD,SAAC3M,GACrBV,EAASyH,EAAa,EAAGZ,EAAUnG,OAoB9BtB,EAAa,eAAC+L,GAAA,EAAD,CAAiBR,MAAO,CAC9BS,SAAU,GACVC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,gBAEZ,+BACI,eAAC,KAAD,CAAO6D,UAAW,WAAlB,SACK3I,EAAMV,KAAI,SAAAW,GAAC,OACR,eAAC,GAAD,CAAMmF,KAAMnF,EACN5F,OAAQA,EACRqG,oBAAqBA,EACrB4E,OAAQmD,EACRpD,SAAUqD,WAKhC,eAAC,KAAD,CACII,SAAUT,EACVG,QAASjI,EACTwI,MAAO1I,EACPF,SAAUA,EACV6I,iBAAkBT,U,wHC1HnB,OAA0B,iC,+BCc5BU,GAAiC,SAACxS,GAAW,IAC/CyS,EAAUC,UAAVD,OACD7O,EAAS+J,aAAYjK,MACrBI,EAAQ6J,aAAY9J,MACpBhB,EAAW+K,eACXjL,EAAcgL,aAAYtH,MAEhC4K,qBAAU,WACNpO,EAASM,iBACX,IAEF,IAIMyJ,EACF,iCACI,eAAC,KAAD,CAAMiB,GAAI,WAAV,SAAsB,+BAAG,eAAC8E,GAAA,EAAD,IAAH,cAA+BhQ,EAA/B,SACtB,iDAIR,OACI,eAAC8P,EAAD,CAAQ7S,UAAW,SAAU4N,MAAO,CAACoF,gBAAiB,UAAWC,SAAU,QAASrC,MAAO,QAA3F,SACI,gBAAC,OAAD,CAAKsC,QAAQ,gBAAb,UACI,eAAC,OAAD,CAAKC,KAAM,GAAX,SACI,gBAAC,SAAD,WAAO,sBAAKvF,MAAO,CAACgD,MAAO,IAAKjD,IAAKyF,GAAM1F,IAAI,SAC3C,eAAC,KAAD,CAAO2F,MAAO,EAAGzF,MAAO,CAAC0F,MAAO,UAAW7E,OAAQ,IAAnD,+BAGR,eAAC,OAAD,CAAK0E,KAAM,EAAX,SACKnP,EACK,gBAAC,SAAD,WACE,eAAC,WAAD,CAASuP,kBAAmB,CAACD,MAAM,SAAUA,MAAO,UAAW1F,MAAO,CAACoF,gBAAiB,UAAWM,MAAO,SAAUtG,QAASA,EAASwG,MAAOtP,EAA7I,SACI,eAAC,UAAD,CAAQ0J,MAAO,CAACoF,gBAAiB,WACzB5D,KAAM,CAACqE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,IAAK,IACpDC,KAAM,eAACC,GAAA,EAAD,QAElB,eAAC,WAAD,CAASR,MAAO,SAAhB,SAA0B,eAAC,UAAD,CAAQ1D,QA3BnC,WACnB7M,Ed0Cc,uCAAgB,WAAOA,GAAP,SAAAC,EAAA,sEACb8H,IADa,OAED,IAFC,OAErBxJ,KAAK6B,YACdJ,EAAST,EAAwB,KAAM,KAAM,MAAM,IAHrB,2CAAhB,wDcfwCxC,UAAW,WADnB,SAC+B,eAACiU,GAAA,EAAD,CACrDrG,MAAO,CAACS,SAAU,GAAIiF,MAAO,kBACnC,eAAC,UAAD,UAAQ,eAAC,KAAD,CAAMrF,GAAI,SAAV,uBAGlB,eAAC,OAAD,CAAKkF,KAAM,U,UCnCpBe,GAAmBpB,KAAnBoB,QAASC,GAAUrB,KAAVqB,OAEVC,GAAmBhE,IAAMiE,MAAK,kBAAM,uDACpCC,GAAmBlE,IAAMiE,MAAK,kBAAM,8DACpCE,GAAWnE,IAAMiE,MAAK,kBAAM,uDAElCG,KAAQC,IAAIC,MAOZ,IAAMC,GAAmBjG,GAAa0F,IAChCQ,GAAmBlG,GAAa4F,IAChCO,GAAgBnG,GAAa6F,IAE7BjF,GAAS,CACXwF,eAAgB,CACZxB,MAAO,QACPL,SAAU,QACVrC,MAAO,OACPK,OAAQ,OACR8D,MAAO,OACPC,IAAK,QAETC,aAAc,CACVC,WAAY,WAEhBC,kBAAmB,CACfD,WAAY,WAEhBE,cAAe,CACXnE,OAAQ,OACRL,MAAO,QAEXyE,QAAS,CACLH,WAAY,WAEhBI,WAAY,CACRrC,SAAU,QACVhC,OAAQ,OACRL,MAAO,SAEX2E,OAAQ,CACJL,WAAY,UACZM,QAAS,gBACTnH,SAAU,UAEdoH,aAAc,CACVC,KAAM,WAEVC,WAAY,CACRrH,QAAS,OACTsH,cAAe,SACftC,MAAO,WAEXuC,OAAQ,CACJvH,QAAS,gBAEbwH,UAAW,CACPZ,WAAY,uBAKda,G,4MACFC,wBAA0B,SAACzO,GACvB0O,MAAM,wB,uDAGV,WACIC,KAAK9V,MAAM+V,gBACX5J,OAAOpE,iBAAiB,qBAAsB+N,KAAKF,2B,kCAGvD,WACIzJ,OAAOvE,oBAAoB,qBAAsBkO,KAAKF,2B,oBAG1D,WACI,OAAKE,KAAK9V,MAAMyL,YAIZ,gBAAC,KAAD,CAAQ7L,UAAU,SAAS4N,MAAO,CAACwI,UAAW,SAA9C,UACI,eAAC,GAAD,IACA,eAAC,KAAD,CAAS5C,MAAO,OAAhB,SACI,+BACA,gBAAC,SAAD,CAAMlE,OAAQA,GAAQyF,OAAK,EAA3B,UACI,gBAAC,KAAD,CAAM9G,GAAG,WAAT,UACI,eAACoI,GAAA,EAAD,CAAczI,MAAO,CAACS,SAAU,GAAII,OAAQ,KADhD,aAGA,gBAAC,KAAD,CAAMR,GAAG,WAAT,UACI,eAACqI,GAAA,EAAD,CAAiB1I,MAAO,CAACS,SAAU,GAAII,OAAQ,KADnD,cAGA,gBAAC,KAAD,CAAMR,GAAG,SAAT,UACI,eAACsI,GAAA,EAAD,CAAsB3I,MAAO,CAACS,SAAU,GAAII,OAAQ,KADxD,WAGA,gBAAC,KAAD,CAAMR,GAAG,QAAT,UACI,eAACuI,GAAA,EAAD,CAAgB5I,MAAO,CAACS,SAAU,GAAII,OAAQ,KADlD,iBAMR,eAACyF,GAAD,CAASlU,UAAW,gBACX4N,MAAO,CAAC4H,QAAS,SAAUvE,OAAQ,OAAQL,MAAO,MAAOnC,OAAQ,OAAQ+D,UAAW,IAD7F,SAEI,sBAAKxS,UAAU,sBAAf,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOyW,OAAK,EAACC,KAAK,IACXC,OAAQ,kBAAM,eAAC,KAAD,CAAU1I,GAAI,gBACnC,eAAC,KAAD,CAAOyI,KAAK,oBACLC,OAAQ,kBAAM,eAAChC,GAAD,OACrB,eAAC,KAAD,CAAO+B,KAAK,oBACLC,OAAQ,kBAAM,eAAC/B,GAAD,OACrB,eAAC,KAAD,CAAO8B,KAAK,SACLC,OAAQ,kBAAM,eAAC,GAAD,OACrB,eAAC,KAAD,CAAOD,KAAK,QACLC,OAAQ,kBAAM,eAAC,GAAD,OACrB,eAAC,KAAD,CAAOD,KAAK,SACLC,OAAQ,kBAAM,eAAC,GAAD,OACrB,eAAC,KAAD,CAAOD,KAAK,YACLC,OAAQ,kBAAM,eAAC,GAAD,OACrB,eAAC,KAAD,CAAOD,KAAK,SACLC,OAAQ,kBAAM,eAAC,GAAD,OACrB,eAAC,KAAD,CAAOD,KAAK,QACLC,OAAQ,kBAAM,eAAC9B,GAAD,OACrB,eAAC,KAAD,CAAO6B,KAAK,IACLC,OAAQ,kBAAM,2DAIjC,eAACxC,GAAD,CAAQvG,MAAO,CAACgJ,UAAW,UAA3B,yDAlDG,eAAC,GAAD,Q,GAhBDxG,IAAMyG,WA4EpBC,GAAerK,YACfsK,KACAC,cANoB,SAACvT,GAAD,MAA0B,CAC9CoI,YAAapI,EAAM2I,IAAIP,eAKE,CAACsK,cdxID,kBAAM,SAAClT,GAEhC,IAAIgU,EAAUhU,EAASsI,KACvBvF,QAAQkR,IAAI,CAACD,IACR3V,MAAK,WACN2B,EAAST,YciIEiK,CAE4BsJ,IAUhCoB,GARa,WACxB,OAAO,eAAC,KAAD,UACH,eAAC,KAAD,CAAUzK,MAAOA,GAAjB,SACI,eAACoK,GAAD,SCxKZM,IAAST,OAAO,eAAC,GAAD,IAAcU,SAASC,eAAe,W","file":"static/js/main.6b737022.chunk.js","sourcesContent":["import React from 'react'\r\nimport s from './formsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form'\r\nimport {FieldValidatorType} from '../../../Utils/Validators/validators'\r\n\r\n//TypeScript\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    //const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} className={s.textArea}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    //const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} className={s.input}/></FormControl>\r\n}\r\n\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    type: string,\r\n    text = ''\r\n) {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            component={component}\r\n            name={name}\r\n            validate={validators}\r\n            type={type}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"users_body__Mqw4A\",\"userPhoto\":\"users_userPhoto__2e6Av\",\"statusbar\":\"users_statusbar__1VjAZ\",\"userName\":\"users_userName__2L42o\",\"status\":\"users_status__110gI\",\"info\":\"users_info__1CK_-\",\"userBar\":\"users_userBar__1vl_Z\",\"grow\":\"users_grow__3z7Pu\",\"card\":\"users_card__1BwS5\",\"follow\":\"users_follow__3_haI\",\"unfollow\":\"users_unfollow__1oYqT\",\"allBody\":\"users_allBody__1808O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"formsControls_textArea__3Sdni\",\"formControl\":\"formsControls_formControl__jxUer\",\"input\":\"formsControls_input__15C_c\",\"error\":\"formsControls_error__2UXYQ\",\"formError\":\"formsControls_formError__3Xjfp\"};","import {APIResponseType, GetMessagesAPIType, instance} from './api'\r\nimport {DialogsType} from '../Redux/dialogsReducer'\r\nimport {MessagesType} from '../types/types'\r\n\r\nexport const dialogsAPI = {\r\n    getDialogs() {\r\n        return instance.get<DialogsType>(`dialogs`)\r\n            .then(res => res.data)\r\n    },\r\n    startMessages(userId: number) {\r\n        return instance.put<APIResponseType>(`dialogs/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getMessages(userId: number, page: number, count: number | null = null) {\r\n        return instance.get<GetMessagesAPIType>(`dialogs/${userId}/messages?page=${page}&count=${count}`)\r\n            .then(res => res.data.items)\r\n    },\r\n    sendMessage(userId: number, body: MessagesType) {\r\n        return instance.post<APIResponseType>(`dialogs/${userId}/messages`, {body})\r\n            .then(res => res.data)\r\n    },\r\n    deleteMessage(messageId: string) {\r\n        return instance.delete<APIResponseType>(`dialogs/messages/${messageId}`)\r\n            .then(res => res.data)\r\n    },\r\n    newMessagesCount() {\r\n        return instance.get<APIResponseType>(`dialogs/messages/new/count`)\r\n            .then(res => res.data)\r\n    },\r\n    restoreDeletedMessages(messageId:string) {\r\n        return instance.get<APIResponseType>(`dialogs/messages/${messageId}/restore`)\r\n            .then(res => res.data)\r\n    },\r\n\r\n}","import {BaseThunkType, InferActionsType} from './redux-store'\r\nimport {MessagesType, PhotosType} from '../types/types'\r\nimport {FormAction} from 'redux-form'\r\nimport {dialogsAPI} from '../api/dialogs-api'\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [] as Array<DialogsType>,\r\n    messages: [] as MessagesType[],\r\n    isFetching: false as boolean,\r\n    totalCount: 100 as number,\r\n    newMessageCount: null as number | null,\r\n    error: '' as string | null\r\n}\r\n// let initialState = {\r\n//     dialogs: [\r\n//         {id: 1, name: \"John Smith\"},\r\n//         {id: 2, name: \"Jim Carry\"},\r\n//         {id: 3, name: \"Angelina Jolly\"},\r\n//         {id: 4, name: \"Vasa Bell\"},\r\n//         {id: 5, name: \"Petia\"},\r\n//     ] as Array<DialogType>,\r\n//     messages: [\r\n//         {id: 1, message: \"yo\"},\r\n//         {id: 2, message: \"How are you?\"},\r\n//         {id: 3, message: \"yo\"},\r\n//         {id: 4, message: \"When is your birthday?\"},\r\n//         {id: 5, message: \"yo\"},\r\n//     ] as Array<MessageType>\r\n// }\r\n\r\nconst dialogsReducer = (state = initialState, action:ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        // case 'SN/dialogs/SEND-MESSAGE': {\r\n        //     return {\r\n        //         ...state,\r\n        //         messages: [...state.messages, {id: Date.now(), message: action.newMessageText}]\r\n        //     }\r\n        // }\r\n        case 'SN/dialogs/GET_DIALOGS': {\r\n            return {\r\n                ...state, dialogs: action.dialogs\r\n            }\r\n        }\r\n        case 'SN/dialogs/SET_MESSAGES': {\r\n\r\n            // @ts-ignore\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'SN/dialogs/SEND_MESSAGES': {\r\n\r\n            // @ts-ignore\r\n            return {...state, messages: [...state.messages, {body: action.body}]}\r\n        }\r\n        case 'SN/dialogs/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/dialogs/DELETE_MESSAGE': {\r\n            return {...state, messages: state.messages.filter((message) => message.id !== action.messageId)}\r\n        }\r\n        case 'SN/dialogs/RESTORE_MESSAGE': {\r\n            return {...state, messages: state.messages.filter((message) => message.id === action.messageId)}\r\n        }\r\n        case 'SN/dialogs/NEW_MESSAGES_COUNT': {\r\n            // @ts-ignore\r\n            return {...state, newMessageCount: action.data}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (body: MessagesType) => ({type: 'SN/dialogs/SEND_MESSAGES', body} as const),\r\n    setAllDialogs: (dialogs: Array<DialogsType>) => ({type: 'SN/dialogs/GET_DIALOGS',dialogs} as const),\r\n    setMessages: (messages: Array<MessagesType>) => ({type: 'SN/dialogs/SET_MESSAGES',messages} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/dialogs/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    deleteMessage: (messageId: string) => ({type: 'SN/dialogs/DELETE_MESSAGE', messageId} as const),\r\n    restoreMessage: (messageId: string) => ({type: 'SN/dialogs/RESTORE_MESSAGE', messageId} as const),\r\n    newMessages: (data: number) => ({type: 'SN/dialogs/NEW_MESSAGES_COUNT', data} as const),\r\n\r\n}\r\n\r\nexport const getMyDialogs = ():ThunkType => async (dispatch) => {\r\n    const data = await dialogsAPI.getDialogs()\r\n    // @ts-ignore\r\n    dispatch(actions.setAllDialogs(data))\r\n};\r\n\r\nexport const getMyMessages = (userId: number, page: number, count: number|null):ThunkType => async (dispatch) => {\r\n\r\n    const data = await dialogsAPI.getMessages(userId, page, count)\r\n\r\n    await dispatch(actions.setMessages(data))\r\n    dispatch(actions.toggleIsFetching(false))\r\n};\r\n\r\nexport const startMessaging = (userId: number, page: number, count: number|null):ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    const data = await dialogsAPI.startMessages(userId)\r\n\r\n    if (data.resultCode === 0) {\r\n        await dispatch(getMyMessages(userId, page, count))\r\n    }\r\n};\r\n\r\nexport const sendMessageReq = (userId: number, body: MessagesType):ThunkType => async (dispatch) => {\r\n\r\n    const data = await dialogsAPI.sendMessage( userId, body)\r\n    if(data.resultCode === 0) {\r\n        dispatch(actions.sendMessage(body))\r\n    }\r\n};\r\nexport const deleteMessage = (messageId: string):ThunkType => async (dispatch) => {\r\n    const data = await dialogsAPI.deleteMessage(messageId)\r\n    if(data.resultCode === 0) {\r\n        dispatch(actions.deleteMessage(messageId))\r\n    }\r\n};\r\nexport const restoreMessage = (messageId: string):ThunkType => async (dispatch) => {\r\n    const data = await dialogsAPI.restoreDeletedMessages(messageId)\r\n    if(data.resultCode === 0) {\r\n        dispatch(actions.restoreMessage(messageId))\r\n    }\r\n};\r\nexport const newMessagesCount = ():ThunkType => async (dispatch) => {\r\n    const data = await dialogsAPI.newMessagesCount()\r\n    debugger\r\n    if(data) {\r\n        // @ts-ignore\r\n        dispatch(actions.newMessages(data))\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import {AppStateType} from \"../redux-store\";\r\n\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\nexport const selectCurrentUserId = (state: AppStateType) => {\r\n    return state.auth.id\r\n}","export default __webpack_public_path__ + \"static/media/user.a4b40bd5.png\";","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\n//TypeScript Profile\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userID: number) {\r\n        return instance.get<ProfileType>(`profile/` + userID).then(res=>res.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>(`profile/status/` + userID).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile/`, profile).then(res => res.data)\r\n    }\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\n// TypeScript Initial State\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 0, like: 15, dislike: 1, message: \"My name is Valerian\", userID: 13236},\r\n        {id: 1, like: 22, dislike: 2, message: \"And I wanna be a front-end developer\", userID: 13236},\r\n        {id: 2, like: 33, dislike: 3, message: \"I really like it! It's really cool!\", userID: 13236},\r\n        {id: 3, like: 55, dislike: 5, message: \"The Wall will work correctly when the server allows it. sorry\", userID: 13236},\r\n        {id: 4, like: 666, dislike: 0, message: \"Yeah, bro! I'll make this Wall better soon!\", userID: 2},\r\n        {id: 5, like: 39, dislike: 0, message: \"Wow, nice work, man!\", userID: 13684}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n    theWallPost: \"\"\r\n}\r\n\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SN/profile/ADD-POST\": {\r\n            let newPost = {\r\n                id: Date.now(),\r\n                like: 0,\r\n                dislike: 0,\r\n                message: action.theWallPost,\r\n                userID: 13236\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n        case \"SN/profile/DELETE_POST\": {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter((posts) => posts.id !== action.id)\r\n            }\r\n        }\r\n        case \"SN/profile/SET_USER_PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"SN/profile/SET_STATUS\": {\r\n            return {...state, status: action.status}\r\n        }\r\n        case \"SN/profile/SAVE_PHOTO_SUCCESS\": {\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (theWallPost: string) => ({type: \"SN/profile/ADD-POST\", theWallPost} as const),\r\n    deletePost: (id: number) => ({type: \"SN/profile/DELETE_POST\", id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SN/profile/SET_USER_PROFILE\", profile } as const),\r\n    setStatus: (status: string) => ({type: \"SN/profile/SET_STATUS\", status } as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SN/profile/SAVE_PHOTO_SUCCESS\", photos } as const),\r\n}\r\n\r\n//Thunks\r\n//@ts-ignore\r\n// export const addPostThunk = (theWallPost: string):ThunkType => (dispatch) => {\r\n//     dispatch(actions.addPostActionCreator(theWallPost));\r\n//     dispatch (<ActionsType>reset('AddPost'));\r\n// }\r\nexport const getUserProfile = (userID: number):ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userID)\r\n        dispatch(actions.setUserProfile(data))\r\n};\r\nexport const getStatus = (userID: number):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userID)\r\n        dispatch(actions.setStatus(data))\r\n};\r\nexport const updateStatus = (status:string):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status))\r\n    }\r\n};\r\nexport const savePhoto = (file:File):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n};\r\nexport const saveProfile = (profile:ProfileType):ThunkType => async (dispatch, getState) => {\r\n    const userID = getState().auth.id\r\n    let data = await profileAPI.saveProfile(profile)\r\n    if (data.resultCode === 0) {\r\n        if (typeof userID === \"number\") {\r\n            await dispatch(getUserProfile(userID))\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// TypeScript Thunks\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import {AppStateType} from '../redux-store'\r\n\r\n\r\nexport const getDialogsSelect = (state: AppStateType) => {\r\n    return state.dialogsPage.dialogs\r\n}\r\nexport const getMessagesSelect = (state: AppStateType) => {\r\n    return state.dialogsPage.messages\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.dialogsPage.isFetching\r\n}\r\nexport const messagesCount = (state: AppStateType) => {\r\n    return state.dialogsPage.newMessageCount\r\n}\r\n","import axios from \"axios\";\r\nimport {MessagesType, UserType} from '../types/types'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\" : \"090ad72b-0983-486c-bc11-7e7db4c71a44\"}\r\n    }\r\n)\r\n\r\n//TypeScript UsersAPI\r\nexport type UsersAPIType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport type GetMessagesAPIType = {\r\n    items: MessagesType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n// Enums\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\nexport enum ResultCodesForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","const subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet socket: WebSocket | null = null\r\n\r\ntype EventsNamesTypes = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.log('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    socket?.removeEventListener('close', closeHandler)\r\n    socket?.removeEventListener('message', messageHandler)\r\n    socket?.removeEventListener('open', openHandler)\r\n    socket?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    socket?.close()\r\n    socket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    socket.addEventListener('close', closeHandler)\r\n    socket.addEventListener('message', messageHandler)\r\n    socket.addEventListener('open', openHandler)\r\n    socket.addEventListener('error', errorHandler)\r\n\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        socket?.close()\r\n\r\n    },\r\n    subscribe(eventName: EventsNamesTypes, callBack: MessagesReceivedSubscriberType | StatusChangedSubscriberType | null) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callBack)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callBack)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesTypes, callBack: MessagesReceivedSubscriberType | StatusChangedSubscriberType | null) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callBack)\r\n    },\r\n    sendMessage(message: string) {\r\n        socket?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    id?: string\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error'","import {FormAction} from 'redux-form'\r\nimport {BaseThunkType, InferActionsType} from './redux-store'\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../api/chat-api'\r\nimport {Dispatch} from 'redux'\r\nimport {v1} from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEIVED':\r\n            return {\r\n\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( (m) => ({...m, id: v1()}))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEIVED',\r\n        payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED',\r\n        payload: {status}\r\n    } as const)\r\n\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\n\r\nconst newStatusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', newStatusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', newStatusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer\r\n\r\n//TypeScript Actions\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\nexport type InitialStateType = typeof initialState","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts1\":\"News_posts1__1FH6a\",\"posts2\":\"News_posts2__3jwiA\",\"input\":\"News_input__1EpdP\",\"image\":\"News_image__1dV2O\",\"profile\":\"News_profile__1aDEJ\",\"underspace\":\"News_underspace__3X3KR\",\"ava\":\"News_ava__3PjwW\",\"avatar\":\"News_avatar__1ZoEM\",\"name\":\"News_name__21i4o\",\"text\":\"News_text__pAl2y\",\"messages\":\"News_messages__2oXu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts1\":\"Music_posts1__r56tM\",\"posts2\":\"Music_posts2__2tjwA\",\"input\":\"Music_input__2r8c2\",\"image\":\"Music_image__3L1-F\",\"profile\":\"Music_profile__Hprgl\",\"underspace\":\"Music_underspace__3tA4h\",\"ava\":\"Music_ava__8peX0\",\"avatar\":\"Music_avatar__3DibX\",\"name\":\"Music_name__3i26K\",\"text\":\"Music_text__2A5h0\",\"messages\":\"Music_messages__3AVZw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts1\":\"Settings_posts1__BIolZ\",\"posts2\":\"Settings_posts2__2DtAB\",\"input\":\"Settings_input__2qQvI\",\"image\":\"Settings_image__3ItaB\",\"profile\":\"Settings_profile__Ml_6r\",\"underspace\":\"Settings_underspace__9Kf9x\",\"ava\":\"Settings_ava__3VvEK\",\"avatar\":\"Settings_avatar__29ypu\",\"name\":\"Settings_name__19osT\",\"text\":\"Settings_text__gBPvX\",\"messages\":\"Settings_messages__1kVbC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"login_checkbox__18Z3U\",\"body\":\"login_body__2jCIk\"};","import {AppStateType} from '../redux-store'\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const isUserAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\n\r\n","import {instance, APIResponseType, UsersAPIType} from \"./api\";\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 100, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get<UsersAPIType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    followUser(userID: number) {\r\n        return instance.post<APIResponseType>(`follow/${userID}`).then(res => res.data)\r\n    },\r\n    unFollowUser(userID: number) {\r\n        return instance.delete(`follow/${userID}`).then(res => res.data) as Promise<APIResponseType>\r\n    },\r\n}","import {UserType} from '../types/types'\r\nimport {BaseThunkType, InferActionsType} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {usersAPI} from '../api/users-api'\r\nimport {APIResponseType} from '../api/api'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 30,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of userId\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/users/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'SN/users/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'SN/users/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/users/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/users/SET_PAGE_SIZE': {\r\n            return {...state, pageSize: action.pageSize}\r\n        }\r\n        case 'SN/users/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/users/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/users/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter(id => id !== action.userID)\r\n            }\r\n        }\r\n        case 'SN/users/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators\r\nexport const actions = {\r\n    followSuccess: (userID: number) => ({type: 'SN/users/FOLLOW', userID} as const),\r\n    unfollowSuccess: (userID: number) => ({type: 'SN/users/UNFOLLOW', userID} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/users/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/users/SET_CURRENT_PAGE', currentPage} as const),\r\n    setPageSize: (pageSize: number) => ({type: 'SN/users/SET_PAGE_SIZE', pageSize} as const),\r\n    setTotalUsersCount: (count: number) => ({type: 'SN/users/SET_TOTAL_USERS_COUNT', count} as const),\r\n    setFilter: (filter: FilterType) => ({type: \"SN/users/SET_FILTER\", payload: filter} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/users/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userID: number) => ({\r\n        type: 'SN/users/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userID\r\n    } as const)\r\n\r\n}\r\n\r\n//Thunks\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setPageSize(pageSize))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, userID: number, apiMethod: (userId:number)=> Promise<APIResponseType>, actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userID))\r\n    let data = await apiMethod(userID)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userID))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userID))\r\n}\r\nexport const follow = (userID: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userID, usersAPI.followUser, actions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userID: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userID, usersAPI.unFollowUser, actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\n// TypeScript\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","import {instance, APIResponseType, ResultCodesEnum, ResultCodesForCaptcha} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n}\r\ntype LoginResponseDataType = {\r\n        userId: number,\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n            .then((res) => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesForCaptcha>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`, {})\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res=>res.data)\r\n    }\r\n}","import {ResultCodesEnum, ResultCodesForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/auth/SET_USER_DATA\":\r\n        case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SN/auth/SET_USER_DATA\",\r\n        payload: {id, email, login, isAuth}\r\n    } as const ),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n        payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport type GetAuthUserDataType = typeof getAuthUserData\r\n\r\n// Thunks\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string):ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        await dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\r\n            await dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n};\r\n\r\nexport const logout = ():ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n//TypeScript Actions\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\nexport type InitialStateType = typeof initialState","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsType} from \"./redux-store\";\r\nimport {newMessagesCount} from './dialogsReducer'\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\n//TypeScript\r\n//type ThunkType = BaseThunkType<ActionsType>\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Actions\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n}\r\n\r\n// Thunks\r\nexport const initializeApp = () => (dispatch: any) => {\r\n\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(actions.initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer;\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport profileReducer from './profileReducer'\r\nimport dialogsReducer from './dialogsReducer'\r\nimport usersReducer from \"./usersReducer\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\"\r\nimport chatReducer from './chat-reducer'\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import s from \"./News.module.css\";\r\n\r\nconst News = () => {\r\n  return <div className={s.content}>NEWS</div>;\r\n};\r\n\r\nexport default News;\r\n","import s from \"./Music.module.css\";\r\n\r\nconst Music = () => {\r\n  return <div className={s.content}>MUSIC</div>;\r\n};\r\n\r\nexport default Music;\r\n","import s from \"./Settings.module.css\";\r\n\r\nconst Settings = () => {\r\n  return <div className={s.content}>Settings</div>;\r\n};\r\n\r\nexport default Settings;\r\n","export type FieldValidatorType = (value:string) => string | undefined\r\n\r\nexport const required:FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLength = (max:number):FieldValidatorType => (value) =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/formsControls'\r\nimport {required} from '../../Utils/Validators/validators'\r\nimport s from './login.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {login} from '../../Redux/auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport style from '../common/FormsControls/formsControls.module.css'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\n\r\n//TypeScript\r\ntype OwnProps = {\r\n    captchaUrl: string | null\r\n}\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    email: string\r\n    password: string\r\n}\r\n\r\ntype LoginFormValuesKeys = GetStringKeys<LoginFormValuesType>\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, OwnProps> & OwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField<LoginFormValuesKeys>('eEmail', \"email\", [required], Input, \"email\")}\r\n            {createField<LoginFormValuesKeys>('Password', \"password\", [required], Input, \"password\")}\r\n            {createField<LoginFormValuesKeys>(undefined, \"rememberMe\", [], Input, \"checkbox\", \"Remember Me\")}\r\n\r\n            {captchaUrl && <img alt={\"captcha\"} src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesKeys>(\"Symbols from image\", \"captcha\", [required], Input, \"\")}\r\n            {error &&\r\n            <div className={style.formError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector((state:AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state:AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div className={s.body}>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n\r\n","import React from 'react'\r\nimport {LoadingOutlined} from '@ant-design/icons'\r\n\r\nlet Loader: React.FC = (props) => {\r\n    return <LoadingOutlined style={{fontSize: 58, display: \"flex\", justifyContent: \"center\", alignItems: \"center\", margin: ' 35vh auto'}}/>\r\n}\r\n\r\n\r\nexport default Loader;","import React from 'react'\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React from 'react'\r\nimport styles from './users.module.css'\r\nimport userPhoto from '../../img/user.png'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {UserType} from '../../types/types'\r\nimport {MinusOutlined, PlusOutlined} from '@ant-design/icons'\r\nimport Text from 'antd/lib/typography/Text'\r\nimport Paragraph from 'antd/lib/typography/Paragraph'\r\nimport Card from 'antd/lib/card'\r\nimport Space from 'antd/lib/space'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow, isAuth}) => {\r\n\r\n    return (\r\n\r\n        <div className=\"site-card-border-less-wrapper\">\r\n\r\n            <Card bodyStyle={{minWidth: '35vw'}} size={'default'} bordered={true} >\r\n                <div className={styles.card} style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <Space>\r\n                        <NavLink to={'/Profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                 className={styles.userPhoto}\r\n                                 alt={user.name}/>\r\n                        </NavLink>\r\n                        <div>\r\n                            <Paragraph className={styles.userName}>{user.name}</Paragraph>\r\n                            <Text className={styles.status} style={{}} ellipsis={true}>{user.status}</Text>\r\n                        </div>\r\n                    </Space>\r\n                    {isAuth ? (user.followed\r\n                        ? <button\r\n                            className={styles.unfollow}\r\n                            disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => {\r\n                                unfollow(user.id)\r\n                            }}><MinusOutlined /></button>\r\n                        : <button\r\n                            className={styles.follow}\r\n                            disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => {\r\n                                follow(user.id)\r\n                            }}><PlusOutlined /></button>) : null\r\n                    }\r\n                </div>\r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default User","import { Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../Redux/usersReducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getUsersFilter} from '../../Redux/Selectors/users-selectors'\r\nimport {Form, Field, SubmitButton} from 'formik-antd'\r\nconst UsersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter:FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={UsersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    {/*@ts-ignore*/}\r\n                    <Field style={{width: 250, border: '1px solid blue', marginRight: 10, outline: 'none'}} type=\"text\" name=\"term\"/>\r\n                    {/*@ts-ignore*/}\r\n                    <Field name=\"friend\" as=\"select\" style={{height: 26, width: 100, border: '1px solid blue', marginRight: 10, outline: 'none'}}>\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Followed</option>\r\n                        <option value=\"false\">Unfollowed</option>\r\n                    </Field>\r\n                    {/*@ts-ignore*/}\r\n                    <SubmitButton  size={'small'} disabled={isSubmitting}>\r\n                        Find\r\n                    </SubmitButton>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","import React, {FC, useEffect} from 'react'\r\nimport styles from './users.module.css'\r\nimport User from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, follow, requestUsers, unfollow} from '../../Redux/usersReducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter,\r\n    isUserAuth\r\n} from '../../Redux/Selectors/users-selectors'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\nimport {LoadingOutlined} from '@ant-design/icons'\r\nimport Space from 'antd/lib/space'\r\nimport Pagination from 'antd/lib/pagination'\r\n\r\n\r\n\r\ntype QueryParamsType = { term?: string, page?: string, friend?: string }\r\n\r\n\r\nexport const Users: FC = (props) => {\r\n    /// -------------Hooks-------------------------------------///\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const users = useSelector(getUsers)\r\n    const isAuth = useSelector(isUserAuth)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const isFetching = useSelector(getIsFetching)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term}\r\n        if (!!parsed.friend) actualFilter = {\r\n            ...actualFilter,\r\n            friend: parsed.friend === 'null' ? null : parsed.friend === 'true' ? true : false\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onPageSizeChanged = (current: number, size: number) => {\r\n        dispatch(requestUsers(current, size, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const followUser = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollowUser = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    /// -------------------UI-------------------------///\r\n    return <div className={styles.body}>\r\n        <Space direction={'vertical'} align={'center'}>\r\n            <Pagination\r\n                style={{marginTop: 10}}\r\n                onChange={onPageChanged}\r\n                current={currentPage}\r\n                total={totalUsersCount}\r\n                pageSize={pageSize}\r\n                onShowSizeChange={onPageSizeChanged}\r\n            />\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            {isFetching ? <LoadingOutlined style={{\r\n                    fontSize: 58,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    margin: ' 35vh auto'\r\n                }}/> :\r\n                <div>\r\n                    <Space direction={'vertical'}>\r\n                        {users.map(u =>\r\n                            <User user={u}\r\n                                  isAuth={isAuth}\r\n                                  followingInProgress={followingInProgress}\r\n                                  follow={followUser}\r\n                                  unfollow={unfollowUser}\r\n                            />)\r\n                        }\r\n                    </Space>\r\n                </div>}\r\n            <Pagination\r\n                onChange={onPageChanged}\r\n                current={currentPage}\r\n                total={totalUsersCount}\r\n                pageSize={pageSize}\r\n                onShowSizeChange={onPageSizeChanged}\r\n            />\r\n        </Space>\r\n\r\n    </div>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Logo.9de1d9c3.png\";","import React, {useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Avatar, Button, Col, Layout, Popover, Row, Space, Tooltip} from 'antd/lib/'\r\nimport {MailOutlined, PoweroffOutlined, UserOutlined} from '@ant-design/icons'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {selectIsAuth, selectUserLogin} from '../../Redux/Selectors/auth-selectors'\r\nimport {logout} from '../../Redux/auth-reducer'\r\nimport logo from '../../img/Logo.png'\r\nimport Title from 'antd/lib/typography/Title'\r\nimport {newMessagesCount} from '../../Redux/dialogsReducer'\r\nimport {messagesCount} from '../../Redux/Selectors/dialogs-selectors'\r\n\r\nexport type PropsType = {}\r\n\r\nexport const AppHeader: React.FC<PropsType> = (props) => {\r\n    const {Header} = Layout\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectUserLogin)\r\n    const dispatch = useDispatch()\r\n    const newMessages = useSelector(messagesCount)\r\n\r\n    useEffect(()=>{\r\n        dispatch(newMessagesCount())\r\n    },[])\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const content = (\r\n        <div>\r\n            <Link to={'/dialogs'}><p><MailOutlined /> Messages ({newMessages})</p></Link>\r\n            <p>New Posts(2)</p>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <Header className={'header'} style={{backgroundColor: '#373a47', position: 'fixed', width: '100%'}}>\r\n            <Row justify=\"space-between\">\r\n                <Col span={16}>\r\n                    <Space><img style={{width: 70}} src={logo} alt=\"Logo\"/>\r\n                        <Title level={3} style={{color: '#e7e7e7', margin: 10}}>Friends Hook</Title>\r\n                    </Space>\r\n                </Col>\r\n                <Col span={6}>\r\n                    {isAuth\r\n                        ? <Space>\r\n                            <Popover overlayInnerStyle={{color:'white'}} color={'#373a47'} style={{backgroundColor: '#373a47', color: 'white'}} content={content} title={login}>\r\n                                <Avatar style={{backgroundColor: '#41b4e9',}}\r\n                                        size={{xs: 25, sm: 30, md: 35, lg: 40, xl: 45, xxl: 47}}\r\n                                        icon={<UserOutlined/>}/>\r\n                            </Popover>\r\n                            <Tooltip title={'LogOut'}><Button onClick={logoutCallback}\r\n                                                              className={'powerOff'}><PoweroffOutlined\r\n                                style={{fontSize: 24, color: 'white'}}/></Button></Tooltip></Space>\r\n                        : <Button><Link to={'/login'}>Login</Link></Button>\r\n                    }\r\n                </Col>\r\n                <Col span={2}>\r\n\r\n                </Col>\r\n            </Row>\r\n        </Header>\r\n    )\r\n}","import React, {ComponentType} from 'react'\nimport store, {AppStateType} from './Redux/redux-store'\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\nimport {connect, Provider} from 'react-redux'\nimport News from './components/News/News'\nimport Music from './components/Music/Music'\nimport Settings from './components/Settings/Settings'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {far} from '@fortawesome/free-regular-svg-icons'\nimport 'antd/dist/antd.css'\nimport './style.css'\nimport {LoginPage} from './components/Login/loginPage'\nimport {compose} from 'redux'\nimport {initializeApp} from './Redux/app-reducer'\nimport Loader from './components/common/preloader'\nimport {withSuspense} from './Hoc/WithSuspense'\nimport {Users} from './components/Users/Users'\nimport Layout from 'antd/lib/layout'\nimport {slide as Menu} from 'react-burger-menu'\nimport {HomeOutlined, MessageOutlined, UsergroupAddOutlined, WechatOutlined} from '@ant-design/icons'\nimport {AppHeader} from './components/Header/Header'\nimport {Tooltip} from 'antd'\n\nconst {Content, Footer} = Layout\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\n\nlibrary.add(far)\n\ntype StatePropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChat = withSuspense(ChatPage)\n\nconst styles = {\n    bmBurgerButton: {\n        color: 'white',\n        position: 'fixed',\n        width: '36px',\n        height: '30px',\n        right: '36px',\n        top: '18px'\n    },\n    bmBurgerBars: {\n        background: '#ffffff'\n    },\n    bmBurgerBarsHover: {\n        background: '#a90000'\n    },\n    bmCrossButton: {\n        height: '24px',\n        width: '24px'\n    },\n    bmCross: {\n        background: '#bdc3c7'\n    },\n    bmMenuWrap: {\n        position: 'fixed',\n        height: '100%',\n        width: '260px'\n    },\n    bmMenu: {\n        background: '#373a47',\n        padding: '2.5em 1.5em 0',\n        fontSize: '2.15em'\n    },\n    bmMorphShape: {\n        fill: '#fc122c'\n    },\n    bmItemList: {\n        display: 'flex',\n        flexDirection: 'column',\n        color: '#b8b7ad',\n    },\n    bmItem: {\n        display: 'inline-block'\n    },\n    bmOverlay: {\n        background: 'rgba(0, 0, 0, 0.3)'\n    }\n}\n\n\nclass App extends React.Component<StatePropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occurred')\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Loader/>\n        }\n        return (\n            <Layout className=\"layout\" style={{minHeight: '100vh'}}>\n                <AppHeader/>\n                <Tooltip title={'Menu'}>\n                    <div>\n                    <Menu styles={styles} right>\n                        <Link to=\"/profile\">\n                            <HomeOutlined style={{fontSize: 30, margin: 0}}/>Profile\n                        </Link>\n                        <Link to=\"/dialogs\">\n                            <MessageOutlined style={{fontSize: 30, margin: 0}}/>Messages\n                        </Link>\n                        <Link to=\"/users\">\n                            <UsergroupAddOutlined style={{fontSize: 30, margin: 0}}/>Users\n                        </Link>\n                        <Link to=\"/chat\">\n                            <WechatOutlined style={{fontSize: 30, margin: 0}}/>Chat\n                        </Link>\n                    </Menu>\n                    </div>\n                </Tooltip>\n                <Content className={'content-field'}\n                         style={{padding: '0 50px', height: '100%', width: '50%', margin: 'auto', marginTop: 70}}>\n                    <div className=\"site-layout-content\">\n                        <Switch>\n                            <Route exact path=\"/\"\n                                   render={() => <Redirect to={'/profile'}/>}/>\n                            <Route path=\"/dialogs/:userId?\"\n                                   render={() => <SuspendedDialogs/>}/>\n                            <Route path=\"/profile/:userID?\"\n                                   render={() => <SuspendedProfile/>}/>\n                            <Route path=\"/users\"\n                                   render={() => <Users/>}/>\n                            <Route path=\"/news\"\n                                   render={() => <News/>}/>\n                            <Route path=\"/music\"\n                                   render={() => <Music/>}/>\n                            <Route path=\"/settings\"\n                                   render={() => <Settings/>}/>\n                            <Route path=\"/login\"\n                                   render={() => <LoginPage/>}/>\n                            <Route path=\"/chat\"\n                                   render={() => <SuspendedChat/>}/>\n                            <Route path=\"*\"\n                                   render={() => <div>404 NOT FOUND</div>}/>\n                        </Switch>\n                    </div>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>FriendHook ©2021 Created by Onium Web</Footer>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst SocNetApp: React.FC = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SocNetApp","import React from \"react\"\nimport ReactDOM from \"react-dom\";\nimport SocNetApp from \"./App\";\n\nReactDOM.render(<SocNetApp/>, document.getElementById(\"root\")\n)\n\n\n"],"sourceRoot":""}